name: Build and Deploy to Cloud Run

on:
    push:
      branches: [ "branch-cd-1" ]
    pull_request:
      branches: [ "branch-cd-1" ]

env:
  PROJECT_ID: ${{secrets.GOOGLE_PROJECT}} # TODO: update Google Cloud project id
  GAR_LOCATION: us-central1 # TODO: update Artifact Registry location
  REPOSITORY: proyecto-2 # TODO: update Artifact Registry repository name
  SERVICE: micro-web # TODO: update Cloud Run service name
  REGION: us-central1 # TODO: update Cloud Run service region

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Wait for tests to succeed
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.sha }}
          check-name: 'Run tests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Checkout
        uses: actions/checkout@v3

    #   - name: Google Auth
    #     id: auth
    #     uses: 'google-github-actions/auth@v0'
    #     with:
    #       token_format: 'access_token'
    #       workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
    #       service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
    #   - name: Google Auth
    #     id: auth
    #     uses: 'google-github-actions/auth@v0'
    #     with:
    #       credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
    #       token_format: 'access_token'
      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
    #   - name: Docker Auth
    #     id: docker-auth
    #     uses: 'docker/login-action@v1'
    #     with:
    #       username: 'oauth2accesstoken'
    #       password: '${{ steps.auth.outputs.access_token }}'
    #       registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          
      # NOTE: Alternative option - authentication via credentials json
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      # - name: Build and Push Container
      #   run: |-
      #     docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest" ./
      #     docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest
          flags: '--allow-unauthenticated --max-instances=1 --port=80'
          # NOTE: You can also set env variables here:
            # env_vars: |
            #     NODE_ENV=production
            #     TOKEN_EXPIRE=6400

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}